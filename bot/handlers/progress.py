from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message

from config.db_settings import main_database
from models.db_utils import get_database_connection, close_database_connection
from models.db_queries import (
    get_user_profile_full,
    log_user_norms,
    check_logged_user_norms,
    last_logged_user_norms,
    get_water_total_today,
    get_calories_total_today,
    get_workout_stats_today
)
from utils.calculations import calculate_user_norms, calculate_age
from utils.logging import setup_logger
from utils.weather_api import get_or_fetch_weather

# ะขะตะผะฟะตัะฐัััะฝัะน ะฟะพัะพะณ ะธ ะดะพะฟะพะปะฝะธัะตะปัะฝะฐั ะฝะพัะผะฐ ะฒะพะดั
TEMPERATURE_THRESHOLD = 25
ADDITIONAL_WATER = 500

logger = setup_logger()

router = Router()

@router.message(F.text == "/check_progress")
async def cmd_check_progress(message: Message):
    logger.info(f"ะะพะปััะตะฝะฐ ะบะพะผะฐะฝะดะฐ /check_progress ะพั ะฟะพะปัะทะพะฒะฐัะตะปั {message.from_user.id}")
    user_id = message.from_user.id

    conn, cursor = get_database_connection(main_database)

    profile = get_user_profile_full(user_id, cursor)

    if not profile:
        await message.answer("ะัะพัะธะปั ะฝะต ะฝะฐะนะดะตะฝ. ะะฐัััะพะนัะต ะตะณะพ ั ะฟะพะผะพััั ะบะพะผะฐะฝะดั /set_profile.")
        close_database_connection(conn)
        return

    name, birth_date, city, height, weight, gender, prefered_water, prefered_calories, prefered_workout, created_at = profile
    age = calculate_age(birth_date)

    if prefered_calories > 0:
        calories_goal = prefered_calories
        logger.info(f"ะะปั {user_id} ะธัะฟะพะปัะทัะตััั ะฟะพะปัะทะพะฒะฐัะตะปััะบะฐั ัะตะปั ะบะฐะปะพัะธะน: {calories_goal}")
    else:
        calories_goal = calculate_user_norms(height, weight, age)["calories_goal"]
        logger.info(f"ะะปั {user_id} ัะฐัััะธัะฐะฝะฐ ัะตะปั ะบะฐะปะพัะธะน: {calories_goal}")

    if prefered_water > 0:
        water_goal = prefered_water
        logger.info(f"ะะปั {user_id} ะธัะฟะพะปัะทัะตััั ะฟะพะปัะทะพะฒะฐัะตะปััะบะฐั ัะตะปั ะฒะพะดั: {water_goal}")
    else:

        water_goal = calculate_user_norms(height, weight, age)["water_goal"]
        logger.info(f"ะะปั {user_id} ัะฐัััะธัะฐะฝะฐ ัะตะปั ะฒะพะดั: {water_goal}")

    if prefered_workout > 0:
        workout_goal = prefered_workout
        logger.info(f"ะะปั {user_id} ะธัะฟะพะปัะทัะตััั ะฟะพะปัะทะพะฒะฐัะตะปััะบะฐั ัะตะปั ะฐะบัะธะฒะฝะพััะธ: {workout_goal} ะผะธะฝัั")
    else:
        workout_goal = calculate_user_norms(height, weight, age)["daily_activity_minutes"]
        logger.info(f"ะะปั {user_id} ัะฐัััะธัะฐะฝะฐ ัะตะปั ะฐะบัะธะฒะฝะพััะธ: {workout_goal} ะผะธะฝัั")

    if check_logged_user_norms(user_id, conn, cursor):

        last_entry = last_logged_user_norms(user_id, conn, cursor)
        if last_entry:
            calories_goal, water_goal, workout_goal, updated_at = last_entry
            logger.info(f"ะัะฟะพะปัะทัะตะผ ัััะตััะฒััััั ะทะฐะฟะธัั ะฝะพัะผ ะดะปั {user_id} ะทะฐ {updated_at}.")
    else:

        log_user_norms(user_id, calories_goal, water_goal, workout_goal, conn, cursor)
        logger.info(f"ะะฐะฟะธัั ะฝะพัะผ ะดะปั {user_id} ะดะพะฑะฐะฒะปะตะฝะฐ ะทะฐ {datetime.now().date()}.")

    temperature = get_or_fetch_weather(user_id, conn, cursor)
    if temperature is not None and temperature > TEMPERATURE_THRESHOLD:
        logger.info(f"ะขะตะผะฟะตัะฐัััะฐ {temperature}ยฐC ะฟัะตะฒััะฐะตั ะฟะพัะพะณ {TEMPERATURE_THRESHOLD}ยฐC. ะะพะฑะฐะฒะปัะตะผ {ADDITIONAL_WATER} ะผะป ะบ ะฝะพัะผะต ะฒะพะดั.")
        water_goal += ADDITIONAL_WATER

    water_consumed = get_water_total_today(user_id, cursor)
    calories_consumed = get_calories_total_today(user_id, cursor)

    total_workout_duration, total_burnt_calories = get_workout_stats_today(user_id, cursor)
    

    close_database_connection(conn)

    additional_water = ADDITIONAL_WATER if temperature > TEMPERATURE_THRESHOLD else 0
    await message.answer(
        f"๐ ะกัะฐััั ะฝะฐ {datetime.now().strftime('%d.%m.%Y')}\n\n"
        f"๐ ะขะตะผะฟะตัะฐัััะฐ {temperature}, ะฒ ะฝะพัะผั ะฒะพะดั ะดะพะฑะฐะฒะปะตะฝะพ {additional_water} ะผะป\n\n"
        f"๐ง ะะพะดะฐ (ะผะป):\n"
        f"โโะะพัะผะฐ ะฝะฐ ะดะตะฝั: {water_goal}\n"
        f"โโะัะฟะธัะพ ะฒะพะดั: {water_consumed}\n"
        f"โโะััะฐะปะพัั ะฒัะฟะธัั: {max(0, water_goal - water_consumed)}\n\n"
        f"๐ฅ ะะฐะปะพัะธะธ (ะบะบะฐะป):\n"
        f"โโะะพัะผะฐ ะฝะฐ ะดะตะฝั: {calories_goal}\n"
        f"โโะะฐะปะพัะธะน ะฟะพััะตะฑะปะตะฝะพ: {calories_consumed}\n"
        f"โโะััะฐะปะพัั ะฝะฐะบััะพัั: {max(0, calories_goal - calories_consumed)}\n\n"
        f"๐โโ๏ธ ะะบัะธะฒะฝะพััั (ะผะธะฝััั):\n"
        f"โโะฆะตะปั: {workout_goal}\n"
        f"โโะขะตะบััะฐั ะฐะบัะธะฒะฝะพััั: {total_workout_duration}\n"
        f"โโะกะพะถะถะตะฝะพ ะบะฐะปะพัะธะน: {total_burnt_calories}\n"
        f"โโะััะฐะปะพัั: {max(0,workout_goal- total_workout_duration)}"

    )
